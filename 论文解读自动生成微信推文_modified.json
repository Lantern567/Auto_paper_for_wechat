{
  "name": "论文解读自动生成微信推文",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -2256,
        -80
      ],
      "id": "1fb6bcd1-f4af-4951-b914-2c6d95394602",
      "name": "When clicking 'Execute workflow'"
    },
    {
      "parameters": {
        "fileSelector": "/files/pdfs/*.pdf"
      },
      "type": "n8n-nodes-base.readBinaryFiles",
      "typeVersion": 1,
      "position": [
        -1968,
        -80
      ],
      "id": "f65c9945-c54f-488a-af3d-8b6e7be70341",
      "name": "读取所有PDF文件"
    },
    {
      "parameters": {
        "jsCode": "// 提取每个PDF的文件信息并生成动态路径\nconst items = [];\nconst batchId = Date.now();\n\nfor (const item of $input.all()) {\n  const fileName = item.binary.data.fileName;\n  const fileNameWithoutExt = fileName.replace('.pdf', '');\n  \n  items.push({\n    json: {\n      fileName: fileName,\n      articleName: fileNameWithoutExt,\n      pdfPath: `E:/code/n8n_workflow/pdfs/${fileName}`,\n      outputDir: `E:/code/n8n_workflow/temp/batch_${batchId}/${fileNameWithoutExt}`,\n      batchId: batchId\n    },\n    binary: item.binary\n  });\n}\n\nreturn items;"
      },
      "id": "712c1775-31c2-4514-8a82-cd7e6fbf25ad",
      "name": "提取文件信息",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1696,
        -320
      ]
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "id": "b8ab1a10-8ee0-4065-8302-5841fd34a954",
      "name": "逐个处理PDF",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1568,
        -96
      ]
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -1120,
        -576
      ],
      "id": "064f20a2-f7dd-46e5-9399-922ede3df633",
      "name": "提取PDF文本1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {
          "maxOutputTokens": 65355,
          "temperature": 0.7,
          "topK": 40,
          "topP": 0.95
        }
      },
      "id": "67ca8fbe-639a-46b8-af3a-209f0122f070",
      "name": "Gemini 2.5 Pro",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -912,
        -48
      ],
      "credentials": {
        "googlePalmApi": {
          "id": "Ix82JRwfawJzI70p",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "default_session"
      },
      "id": "621fff37-4b85-45bf-b612-8e8f194ec16e",
      "name": "对话记忆",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.2,
      "position": [
        -784,
        -48
      ],
      "disabled": true
    },
    {
      "parameters": {
        "name": "process_pdf",
        "description": "处理PDF文件并提取内容",
        "jsCode": "const pdfText = $input.first().json.text || '';\nif (!pdfText) {\n  return { success: false, error: '未能提取PDF文本内容' };\n}\n\nreturn {\n  success: true,\n  pdfContent: pdfText,\n  message: `成功提取PDF内容，共 ${pdfText.length} 字符`\n};",
        "specifyInputSchema": true
      },
      "id": "af4d2b47-e514-499a-9859-e20ee158e2e9",
      "name": "PDF处理工具",
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1,
      "position": [
        -560,
        -48
      ]
    },
    {
      "parameters": {
        "name": "format_wechat_article",
        "description": "将Markdown格式的文章转换为微信公众号HTML格式。输入参数: articleContent (Markdown文章内容)",
        "jsCode": "const articleContent = $input.articleContent;\n\nif (!articleContent) {\n  return { success: false, error: '未提供文章内容' };\n}\n\nlet wechatContent = articleContent;\nwechatContent = wechatContent.replace(/^### (.+)$/gm, '<h3>$1</h3>');\nwechatContent = wechatContent.replace(/^## (.+)$/gm, '<h2>$1</h2>');\nwechatContent = wechatContent.replace(/^# (.+)$/gm, '<h1>$1</h1>');\nwechatContent = wechatContent.replace(/\\*\\*(.+?)\\*\\*/g, '<strong>$1</strong>');\nwechatContent = wechatContent.replace(/^> (.+)$/gm, '<blockquote>$1</blockquote>');\nwechatContent = wechatContent.replace(/^\\*\\*\\*$/gm, '<hr>');\n\nconst titleMatch = articleContent.match(/^# (.*?)(?=>)/);\nconst title = titleMatch ? titleMatch[1].trim() : '论文解读';\n\nconst summaryMatch = articleContent.match(/> (.*?)(?=\\*\\*\\*)/);\nconst summary = summaryMatch ? summaryMatch[1].trim() : '';\n\nreturn {\n  success: true,\n  title: title,\n  summary: summary,\n  content: wechatContent,\n  originalMarkdown: articleContent\n};",
        "specifyInputSchema": true
      },
      "id": "b9505a0a-4bde-441c-8bb8-e68bed2b5ddd",
      "name": "格式化工具",
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1,
      "position": [
        -672,
        -48
      ]
    },
    {
      "parameters": {
        "jsCode": "// 合并节点提供的 mdnice 输出与图片数据\nconst mergedData = $input.all()[0].json;\nconst mdniceOutput = mergedData;\n\nlet wechatContent = '';\nif (mdniceOutput.html) {\n  wechatContent = mdniceOutput.html;\n} else if (mdniceOutput.stdout) {\n  wechatContent = mdniceOutput.stdout;\n} else if (mdniceOutput.output) {\n  wechatContent = mdniceOutput.output;\n} else {\n  throw new Error('未能获取 mdnice 转换后的 HTML 内容。HTTP 响应: ' + JSON.stringify(mdniceOutput).substring(0, 500));\n}\n\nif (!wechatContent || wechatContent.length < 100) {\n  throw new Error('mdnice 转换的 HTML 内容异常短，可能转换失败。长度: ' + (wechatContent ? wechatContent.length : 0));\n}\n\nconst titleMatch = wechatContent.match(/<h1[^>]*>.*?<span class=\"content\"[^>]*>([^<]+)<\\/span>/i);\nconst title = titleMatch ? titleMatch[1].trim() : '论文解读';\nconst summaryMatch = wechatContent.match(/<blockquote[^>]*>.*?<p[^>]*>([^<]+)<\\/p>/is);\nconst summary = summaryMatch ? summaryMatch[1].trim() : '';\n\nconst imagePaths = Array.isArray(mergedData.imagePaths) ? mergedData.imagePaths : [];\nconst figures = Array.isArray(mergedData.figures) ? mergedData.figures : [];\n\nreturn {\n  title,\n  summary,\n  content: wechatContent,\n  imagePaths,\n  figures,\n  debug_content_length: wechatContent.length\n};\n"
      },
      "id": "77e059e0-2c11-4407-9c07-364eeb13ddc2",
      "name": "AI Agent输出处理",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -48,
        -272
      ]
    },
    {
      "parameters": {
        "resource": "media",
        "operation": "media:uploadOther"
      },
      "id": "b8158573-3c1e-445e-8157-06bdcd71e332",
      "name": "上传封面到微信2",
      "type": "n8n-nodes-wechat-offiaccount.wechatOfficialAccountNode",
      "typeVersion": 1,
      "position": [
        -928,
        224
      ],
      "credentials": {
        "wechatOfficialAccountCredentialsApi": {
          "id": "ktFqa6y7JD7C2ZBV",
          "name": "Wechat Official Account Credentials account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      },
      "id": "f5eb108f-4b28-4c44-bc43-48e4930a8a42",
      "name": "合并AI内容和封面",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        544,
        208
      ]
    },
    {
      "parameters": {
        "jsCode": "// 从合并后的数据中提取信息\nconst items = $input.all();\n\n// 第一个输入应该是AI Agent输出处理的结果(包含title, summary, content)\nconst articleData = items[0].json;\n\n// 第二个输入应该是上传封面到微信的结果(包含media_id)\nconst coverData = items[1] ? items[1].json : items[0].json;\n\n// 提取封面 media_id\nconst mediaId = coverData.media_id;\nif (!mediaId) {\n  throw new Error('未能获取封面图 media_id');\n}\n\n// 提取文章元数据\nconst title = articleData.title || \"论文解读\";\nconst summary = articleData.summary || \"\";\nconst content = articleData.content;\n\n// 验证文章内容\nif (!content || content.length < 100) {\n  throw new Error('文章内容异常短或为空。长度: ' + (content ? content.length : 0));\n}\n\n// 构建微信草稿文章对象\nconst article = {\n  \"title\": title,                    // 文章标题(从HTML中提取)\n  \"author\": \"论文解读\",              // 作者名称\n  \"digest\": summary,                 // 文章摘要(从HTML中提取)\n  \"content\": content,                // 文章内容(mdnice转换的HTML)\n  \"content_source_url\": \"\",         // 原文链接(可选)\n  \"thumb_media_id\": mediaId,        // 封面图片media_id\n  \"need_open_comment\": 0,           // 是否打开评论\n  \"only_fans_can_comment\": 0        // 是否仅粉丝可评论\n};\n\nreturn {\n  articles: JSON.stringify([article]),\n  // 调试信息\n  debug_media_id: mediaId,\n  debug_title: title,\n  debug_summary: summary,\n  debug_content_length: content.length\n};"
      },
      "id": "52273bcd-947f-4128-af04-0671d516bb75",
      "name": "准备AI微信草稿数据",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        736,
        208
      ]
    },
    {
      "parameters": {
        "resource": "draft",
        "operation": "draft:add",
        "articles": "={{ $json.articles }}"
      },
      "id": "e9b59a53-a6f1-44c0-8eb0-5c092536c61b",
      "name": "保存AI微信草稿",
      "type": "n8n-nodes-wechat-offiaccount.wechatOfficialAccountNode",
      "typeVersion": 1,
      "position": [
        928,
        208
      ],
      "credentials": {
        "wechatOfficialAccountCredentialsApi": {
          "id": "ktFqa6y7JD7C2ZBV",
          "name": "Wechat Official Account Credentials account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "options": {}
      },
      "id": "c4faa95b-5387-4f20-b64c-3df3b781369f",
      "name": "论文解读AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -832,
        -288
      ]
    },
    {
      "parameters": {
        "jsCode": "const pdfText = $json.text || '';\n\nif (!pdfText) {\n  throw new Error('未能提取PDF文本内容');\n}\n\nconst promptTemplate = `我现在想写一系列公众号文章，我会上传给您一个内容格式模板，是用markdown格式撰写的一个通用模板。你只需参照这个内容格式模板写公众号文章就行。我会上传给您pdf文章，你基于pdf文章撰写公众号文章即可。\n\n**文章长度要求：**\n- 每个章节至少包含 3-5 个详细的子章节\n- 全文总字数应在 10000 字以上\n- 注意不要说其他的例如\"好的\"等等的话，直接按照格式写就行\n- 要合理分段，增强文章的可读性\n- 确保对论文的核心方法、实验结果、创新点进行深入阐述\n\n**模板格式内容：**\n（这里不要有空行）\n# 模仿液滴表面张力！这款可变刚度车轮，实现\"软硬\"状态的实时切换\n> Science Robotics最新成果：通过调节轮内\"智能链\"的张力，在刚性滚转与柔性越障之间实现无缝过渡\n***\n\n## 全文速览\n传统车轮在平坦地面上高效稳定，但在崎岖地形上却举步维艰，这构成了移动机器人领域的一个经典权衡。为了破解这一难题，来自韩国机械与材料研究院（KIMM）等机构的团队，从**液滴的表面张力**现象中汲取灵感，开发了一款全新的**可变刚度变形车轮**。该车轮的核心，是一个位于轮子外缘的**“智能链”**结构，其“表面张力”可以通过内部的**钢丝辐条**进行实时调节。当张力增大时，车轮会收缩成一个坚硬的圆形，适合在平地上高速行驶；当张力减小时，车轮则会变得柔软，能够像履带一样“包裹”住障碍物并平稳越过。这项技术成功地被应用到了一台重达$120$公斤的双轮轮椅上，并实现了在户外环境中的实时“软硬”状态切换和越障。\n\n## 01 研究背景\n轮式、履带式和腿式是移动机器人的三种主流运动模式，它们在平地效率和越障能力之间各有取舍。虽然非充气轮胎等柔性车轮在一定程度上提升了越障能力，但它们的整体刚度是固定的，无法同时满足“高速平地行驶”（需要高刚度）和“极限越障”（需要低刚度）这两个相互矛盾的需求。因此，如何设计一款能够**在线、实时地、大范围地调节自身刚度和形态**的车轮，是实现真正全地形移动的关键。\n\n## 02 研究贡献\n本文提出的液滴启发式车轮，通过一个巧妙的仿生机械设计，成功地解决了上述核心挑战，其主要贡献如下：\n\n1.  **开创了“表面张力”可变刚度范式：** 首次将液滴表面张力的物理原理，类比并应用到车轮的机械设计中，提出了一种通过调节辐条张力来控制轮缘“智能链”宏观刚度的全新方法。\n2.  **实现了大范围、实时的刚度调节：** 车轮可以在坚硬的“圆形”和柔软的“变形”两种状态间无缝切换，其可变形深度高达自身半径的$40\\%$。\n3.  **构建并验证了大型应用平台：** 成功地将该技术从小型验证平台，扩展并应用到了一台$120$公斤级的全尺寸双轮轮椅上，并在真实的户外环境中，验证了其在负载下的实时越障能力。\n4.  **建立了系统的力学分析模型：** 为车轮复杂的变形过程和刚度变化机理，建立了详尽的几何与力学分析模型，为未来的设计优化提供了理论基础。\n\n## 03 整体设计：一个会“变形”的轮子 (图1)\n\n\n\n图1是整个设计的“总纲”，它清晰地阐述了车轮的设计理念、核心机制以及与液滴的深刻类比。\n\n\n\n1.  **两种核心状态 (图1A):**\n\n    (1) **圆形高刚度状态 (i):** 适用于平地，如同一个普通的刚性车轮。\n    (2) **变形低刚度状态 (ii):** 适用于崎岖地形，车轮可以主动变“软”，以适应障碍物的形状。\n    \n2.  **核心驱动机制 (图1B):** 车轮的“软硬”由**轮毂间距（Hub-gap distance）**控制。轮缘的“智能链”由多根钢丝辐条连接到轮毂上。当轮毂间距$l_h$变大时，辐条被拉紧，对智能链产生一个强大的向内“收缩力”，使车轮变硬、变圆；反之，当$l_h$变小时，辐条松弛，车轮变软。\n\n3.  **与液滴的类比 (图1D, E):**\n    (1) **力的类比 (图1D):** 辐条对智能链的收缩力，在物理上等效于液体内部分子间的内聚力对表层分子产生的“表面张力”。\n    (2) **形态的类比 (图1E):** 车轮刚度的变化，类似于液滴通过改变表面张力来改变其接触角$\\theta$。高表面张力对应高刚度的圆形轮廓，低表面张力对应低刚度的变形轮廓。\n![图1. 可变刚度变形车轮的配置](https://i.imgur.com/your-placeholder-for-fig1.png)\n\n**图1. 可变刚度变形车轮的配置。**\n\n\n\n## 04 核心力学：刚度变化的秘密 (图2 & 图4)\n\n1.  **变形的几何学 (图2):** 研究团队为车轮在与地面接触并发生形变时的复杂几何变化，建立了精确的数学模型。\n    (1) **公式(1) - (5):** 这一系列公式，基于不同的假设（如智能链块的旋转中心位置），精确地计算了在给定的下压深度$d$下，为了维持轮廓，钢丝辐条需要伸长的长度$\\Delta R$。这为控制器的设计提供了理论基础。\n\n\n\n2.  **刚度的实验验证 (图4):**\n    (1) **实验设置 (图4A):** 通过一个专门的测试台，研究者用不同宽度的压头，在不同的轮毂间距（即不同“表面张力”）下，对车轮进行按压，并测量其力-位移曲线。\n    (2) **平地模拟 (图4B, C, D, E):** 使用宽压头模拟平地。结果显示，当轮毂间距最小时（张力最大，如图4C），车轮表现出极高的初始刚度（第一区域），如同一个硬轮。而当轮毂间距增大时（张力减小，如图4D），其初始刚度显著降低，变得非常“软”。\n    (3) **越障模拟 (图4F, G, H):** 使用窄压头模拟障碍物。结果同样显示，通过增大轮毂间距，可以显著降低车轮在接触障碍物时的“过渡力”（Transition force），使其更容易发生变形。\n\n\n**图2. 基于钢丝辐条张力的刚度变化机制。**\n\n**图4. 基于表面张力的车轮特性评估。**\n\n\n\n## 05 “智能链”的设计 (图3)\n\n为了更好地模仿液滴“在变形时表面积增加”的特性，研究团队还为智能链本身设计了一套巧妙的几何结构。\n1.  **曲率依赖的距离变化 (图3A):** 智能链的每个单元块之间的连接，被设计为在**正向弯曲**（远离轮心）时，单元块间距会**增大**；而在**反向弯曲**（朝向轮心）时，间距保持**不变**。\n2.  **能量最小化原理:** 这意味着，车轮的**周长**（总势能）在**圆形**状态下是最小的。任何偏离圆形的变形，都会因单元块间距的增大而导致周长增加，从而增加系统的总势能。这在物理上确保了车轮在不受外力时，有自动恢复到圆形的趋势。\n\n\n\n**图3. 智能链结构的几何描述。**\n\n\n\n### 06 越障能力评估 (图5 & 图6)\n\n\n\n1.  **实验室测试 (图5):**\n    (1) **轨迹对比:** **图5A, B**清晰地显示，在面对一个台阶时，高刚度（轮毂间距小）的车轮会像普通轮子一样，绕着台阶边缘“硬”翻过去，导致车身剧烈颠簸。而低刚度（轮毂间gāo距大）的车轮，则会平滑地变形，“包裹”住台阶，使得车身的垂直位移小得多，过程非常平稳。\n    (2) **实时模式切换 (图5C):** 展示了机器人在下台阶时，通过实时地从高刚度切换到低刚度，避免了剧烈的冲击。\n\n2.  **仿真验证 (图6):**\n    (1) **稳定性分析 (图6A, B):** 通过仿真，研究团队量化了在不同台阶高度和负载下，成功越障所需的最小轮毂间距（即最大“柔软度”）。\n    (2) **变形过程可视化 (图6F):** 仿真动画清晰地展示了车轮在越障过程中的详细变形过程，与真实世界的表现高度一致。\n\n\n\n\n\n**图5. 车轮轨迹评估。**\n\n**图6. 越障能力与仿真结果评估。**\n\n\n\n## 07 真实世界验证 (图7)\n这是对整个系统能力的最终、最全面的展示。\n1.  **四轮小车 (图7A, B):** 一个小型的四轮验证平台，成功地在布满不规则石块的地面（A）和高达$180$毫米的台阶（B，为车轮半径的$1.2$倍）上，通过切换车轮状态，实现了平稳穿越。\n\n2.  **双轮轮椅 (图7C, D):**\n\n    (1) **硬件:** 一个$120$公斤级的、搭载了两个$560$毫米直径可变刚度车轮的全尺寸轮椅。\n\n    (2) **户外测试:** 在真实的户外环境中，轮椅成功地在一个方形障碍物（C）和不规则的岩石（D）前，**实时地将车轮从“硬”切换为“软”**，并安全、平稳地越过了障碍。\n\n    (3) **控制算法 (公式7):** 其平衡与运动控制，由一个基于动力学模型的控制器$\\tau(t) = \\tau_{fw}(t) + \\tau_{fbk}(t)$实现。\n\n\n\n\n**图7. 基于表面张力的车轮特性评估。**\n\n\n## 08 结论与展望\n\n本文通过一个源于自然、设计精巧的可变刚度变形车轮，成功地为移动机器人克服了“平地效率”与“越障能力”之间的经典矛盾。它不仅在技术上实现了里程碑式的突破，其“软硬兼施、实时切换”的设计哲学，也为未来所有需要在复杂、非结构化环境中与物理世界进行交互的机器人，提供了极其宝贵的通用解决方案。这项工作预示着，未来的轮式机器人，或许真的能像液体一样，无往不至。\n\n请严格按照以上模板的风格和结构来撰写文章。`;\n\nreturn {\n  chatInput: `${promptTemplate}\\n\\n以下是PDF论文内容：\\n\\n${pdfText}`\n};"
      },
      "id": "3dc68d8a-d259-4390-b045-89c1dc1193d8",
      "name": "准备AI Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -960,
        -352
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:3456/convert",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { \"markdown\": $json.output || $json.text, \"imagePaths\": [] } }}",
        "options": {
          "timeout": 120000
        }
      },
      "id": "03692d7e-2010-4dae-bd2a-1eb1b3049ca4",
      "name": "Mdnice格式转换",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -240,
        -272
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:3457/extract",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { \"pdfPath\": $json.pdfPath, \"outputDir\": $json.outputDir } }}",
        "options": {
          "timeout": 60000
        }
      },
      "id": "0dbcf768-0ccc-4c50-a64d-1cc07e584ff0",
      "name": "提取PDF图片",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1360,
        64
      ]
    },
    {
      "parameters": {
        "jsCode": "// 从HTTP Request节点获取图片提取服务的响应\nconst response = $input.first().json;\n\n// 检查提取是否成功\nif (!response.success) {\n  const errorMsg = response.error || '未知错误';\n  console.error('图片提取失败:', errorMsg);\n  return [];\n}\n\n// 获取图表信息和第一页\nconst figures = response.figures || [];\nconst firstPage = response.first_page;\n\nif (figures.length === 0) {\n  console.log('未提取到任何图表');\n}\n\nconsole.log(`成功提取 ${figures.length} 个图表，转换为binary格式...`);\n\n// 将每个图片的base64数据转换为n8n的binary格式\nconst results = [];\n\n// 首先添加第一页（如果存在）\nif (firstPage && firstPage.base64_data) {\n  console.log(`添加第一页: ${firstPage.filename} (${firstPage.base64_data.length} chars)`);\n  results.push({\n    json: {\n      type: 'first_page',\n      fileName: firstPage.filename,\n      page: firstPage.page\n    },\n    binary: {\n      data: {\n        data: firstPage.base64_data,\n        mimeType: firstPage.mime_type || 'image/png',\n        fileName: firstPage.filename,\n        fileExtension: 'png'\n      }\n    }\n  });\n}\n\n// 然后添加所有图表\nfor (let idx = 0; idx < figures.length; idx++) {\n  const fig = figures[idx];\n  \n  if (!fig.base64_data) {\n    console.error(`  [${idx + 1}/${figures.length}] 缺少 base64_data`);\n    continue;\n  }\n  \n  console.log(`  [${idx + 1}/${figures.length}] ${fig.filename} (${fig.base64_data.length} chars)`);\n  \n  results.push({\n    json: {\n      type: 'figure',\n      imageIndex: idx,\n      fileName: fig.filename,\n      page: fig.page,\n      figureIndex: fig.figure_index,\n      caption: fig.caption\n    },\n    binary: {\n      data: {\n        data: fig.base64_data,\n        mimeType: fig.mime_type || 'image/png',\n        fileName: fig.filename,\n        fileExtension: 'png'\n      }\n    }\n  });\n}\n\nconsole.log(`转换完成，成功 ${results.length} 个图片（含第一页）`);\nreturn results;"
      },
      "id": "4d521ae7-8867-4776-8d5c-b616db95c925",
      "name": "处理图片路径",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1216,
        80
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      },
      "id": "9d89eaa8-712f-4fd1-bf16-06cb9b0c1df6",
      "name": "合并Markdown和图片",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        -432,
        -272
      ]
    },
    {
      "parameters": {
        "resource": "media",
        "operation": "media:uploadOther"
      },
      "name": "上传正文图片",
      "type": "n8n-nodes-wechat-offiaccount.wechatOfficialAccountNode",
      "typeVersion": 1,
      "position": [
        -864,
        80
      ],
      "id": "5536f3cb-67c4-4f2e-ad8c-5b90a4ac846a",
      "credentials": {
        "wechatOfficialAccountCredentialsApi": {
          "id": "ktFqa6y7JD7C2ZBV",
          "name": "Wechat Official Account Credentials account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const uploads = $input.all().map(item => item.json).filter(item => item && item.url);\nuploads.sort((a, b) => (a.imageIndex ?? 0) - (b.imageIndex ?? 0));\nreturn [{ json: { uploadedImages: uploads } }];\n"
      },
      "name": "汇总正文图片链接",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        80
      ],
      "id": "6808edad-e34e-47b6-943b-915e9981c781"
    },
    {
      "parameters": {
        "jsCode": "// Merge节点将两个输入合并成一个item，所有字段都在同一个对象里\nconst mergedData = $input.first().json;\n\n// 从合并后的数据中提取所有字段\nconst uploadedImages = Array.isArray(mergedData.uploadedImages) ? mergedData.uploadedImages : [];\nlet content = mergedData.content || '';\nconst firstPageUrl = mergedData.url || null;  // 来自\"上传第一页到微信\"的url字段\n\nconsole.log('=== 图片插入调试信息 ===');\nconsole.log('合并后的数据keys:', Object.keys(mergedData));\nconsole.log('第一页图片URL:', firstPageUrl);\nconsole.log('正文图片数量:', uploadedImages.length);\nif (uploadedImages.length > 0) {\n  console.log('上传的图片详情:');\n  uploadedImages.forEach((img, idx) => {\n    console.log(`  图${idx + 1}: ${img.url || '(无URL)'}`);\n  });\n}\n\n// 搜索图片标记模式：<strong>图1. xxx</strong> 或 <strong>图 1. xxx</strong>\nconst figurePattern = /<strong[^>]*>图\\s*(\\d+)\\..*?<\\/strong>/g;\nconst matches = [...content.matchAll(figurePattern)];\nconsole.log(`HTML中找到 ${matches.length} 个图片标记`);\n\nif (matches.length > 0) {\n  matches.forEach((match, idx) => {\n    const figNum = match[1];\n    const fullMatch = match[0];\n    console.log(`  标记${idx + 1}: 图${figNum} - \"${fullMatch.substring(0, 50)}...\"`);\n  });\n}\n\n// 在图片标记前插入对应的微信图片\nif (matches.length > 0 && uploadedImages.length > 0) {\n  let imageIndex = 0;\n\n  content = content.replace(figurePattern, (match) => {\n    if (imageIndex >= uploadedImages.length) {\n      console.log(`⚠️  图片${imageIndex + 1}：已超出上传图片数量，跳过`);\n      return match;\n    }\n\n    const upload = uploadedImages[imageIndex];\n    if (!upload || !upload.url) {\n      console.log(`⚠️  图片${imageIndex + 1}：URL为空，跳过`);\n      imageIndex++;\n      return match;\n    }\n\n    console.log(`✓ 在\"${match.substring(0, 30)}...\"前插入图片: ${upload.url}`);\n\n    // 在图片标记前插入居中的图片\n    const imgTag = `<p data-tool=\"mdnice编辑器\" style=\"color: rgb(43, 43, 43); font-size: 14px; line-height: 1.8em; letter-spacing: 0.02em; text-align: center; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\"><img src=\"${upload.url}\" data-src=\"${upload.url}\" style=\"max-width: 100%; height: auto;\" /></p>\\n${match}`;\n    imageIndex++;\n    return imgTag;\n  });\n\n  console.log(`=== 完成：成功插入了 ${imageIndex} 张图片 ===`);\n} else if (matches.length === 0 && uploadedImages.length > 0) {\n  // 如果没有找到图片标记，在第一个</blockquote>后或第一个<h2>标签后插入所有图片\n  console.log('⚠️  警告: HTML中未找到图片标记，将在文章开头插入所有图片');\n\n  const allImagesHtml = uploadedImages.map((upload, idx) => {\n    if (!upload || !upload.url) {\n      console.log(`⚠️  图片${idx + 1}：URL为空，跳过`);\n      return '';\n    }\n    console.log(`✓ 插入图片${idx + 1}: ${upload.url}`);\n    return `<p data-tool=\"mdnice编辑器\" style=\"color: rgb(43, 43, 43); font-size: 14px; line-height: 1.8em; letter-spacing: 0.02em; text-align: center; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\"><img src=\"${upload.url}\" data-src=\"${upload.url}\" style=\"max-width: 100%; height: auto;\" /></p>`;\n  }).filter(html => html).join('\\n');\n\n  // 优先在第一个h2标签前插入\n  const h2Regex = /<h2[^>]*>/i;\n  if (h2Regex.test(content)) {\n    content = content.replace(h2Regex, `${allImagesHtml}\\n$&`);\n    console.log('✓ 已在第一个<h2>标签前插入所有图片');\n  } else {\n    // 如果没有h2，在第一个</blockquote>后插入\n    const blockquoteEndRegex = /<\\/blockquote>/i;\n    if (blockquoteEndRegex.test(content)) {\n      content = content.replace(blockquoteEndRegex, `$&\\n${allImagesHtml}`);\n      console.log('✓ 已在</blockquote>后插入所有图片');\n    } else {\n      // 如果都没有，在内容最前面插入\n      content = allImagesHtml + '\\n' + content;\n      console.log('✓ 已在内容最前面插入所有图片');\n    }\n  }\n\n  console.log(`=== 完成：成功插入了 ${uploadedImages.length} 张图片（fallback模式）===`);\n} else if (uploadedImages.length === 0) {\n  console.log('⚠️  警告: 没有上传的图片');\n}\n\n// 在summary（blockquote）后插入第一页图片\nif (firstPageUrl) {\n  console.log(`\\n准备插入第一页图片: ${firstPageUrl}`);\n  const blockquoteEndRegex = /<\\/blockquote>/i;\n  if (blockquoteEndRegex.test(content)) {\n    const firstPageImg = `<p style=\"text-align: center;\"><img src=\"${firstPageUrl}\" data-src=\"${firstPageUrl}\" style=\"max-width: 100%; height: auto;\" /></p>`;\n    content = content.replace(blockquoteEndRegex, `</blockquote>${firstPageImg}`);\n    console.log('✓ 第一页图片已成功插入到summary后');\n  } else {\n    console.log('⚠️  警告: 未找到blockquote标签');\n  }\n} else {\n  console.log('\\n⚠️  警告: 未找到第一页图片URL');\n}\n\nreturn [{\n  json: {\n    title: mergedData.title,\n    summary: mergedData.summary,\n    content: content,\n    uploadedImages: uploadedImages,\n    debug_content_length: content.length,\n    debug_first_page_inserted: !!firstPageUrl,\n    debug_figure_marks_found: matches.length,\n    debug_uploaded_images_count: uploadedImages.length\n  }\n}];"
      },
      "name": "替换正文图片链接",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        64
      ],
      "id": "d88e9212-1c0d-4610-a85d-46ae7e22ad58"
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      },
      "name": "合并正文内容和链接",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        160,
        64
      ],
      "id": "0b41e9a0-15da-4644-97b0-231f188809cc"
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      },
      "id": "44350672-0b50-4a17-bf2e-0016eab65234",
      "name": "合并第一页和正文内容",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        256,
        160
      ]
    },
    {
      "parameters": {
        "jsCode": "// 过滤出类型为 figure 的图片\nconst items = $input.all();\nconst figureItems = items.filter(item => item.json.type === 'figure');\n\nif (figureItems.length === 0) {\n  console.log('未找到任何图表');\n  return [];\n}\n\nconsole.log(`找到 ${figureItems.length} 个图表`);\nreturn figureItems;"
      },
      "id": "47eb7950-9275-4d41-862e-e7c344d78035",
      "name": "过滤正文图片",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1088,
        80
      ]
    },
    {
      "parameters": {
        "jsCode": "// 提取第一张图作为封面\nconst items = $input.all();\n\nif (!items || items.length === 0) {\n  throw new Error('没有可用的图片数据');\n}\n\n// 只返回第一张图片作为封面\nreturn [items[0]];"
      },
      "id": "fdfec75b-8d76-4351-946b-af6b2a2400af",
      "name": "提取第一张图作为封面",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -752,
        160
      ]
    },
    {
      "parameters": {
        "jsCode": "// 过滤出类型为 first_page 的图片\nconst items = $input.all();\nconst firstPageItems = items.filter(item => item.json.type === 'first_page');\n\nif (firstPageItems.length === 0) {\n  console.log('未找到第一页图片');\n  return [];\n}\n\nconsole.log(`找到第一页图片: ${firstPageItems[0].json.fileName}`);\nreturn firstPageItems;"
      },
      "id": "2a5c7c23-c8d1-412e-88ae-b49955526083",
      "name": "过滤第一页图片",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1120,
        256
      ]
    },
    {
      "parameters": {
        "resource": "media",
        "operation": "media:uploadOther"
      },
      "id": "c4672c76-4a63-4cb3-b826-09ebdc42bb16",
      "name": "上传第一页到微信",
      "type": "n8n-nodes-wechat-offiaccount.wechatOfficialAccountNode",
      "typeVersion": 1,
      "position": [
        -544,
        272
      ],
      "credentials": {
        "wechatOfficialAccountCredentialsApi": {
          "id": "ktFqa6y7JD7C2ZBV",
          "name": "Wechat Official Account Credentials account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking 'Execute workflow'": {
      "main": [
        [
          {
            "node": "读取所有PDF文件",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "读取所有PDF文件": {
      "main": [
        [
          {
            "node": "提取文件信息",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "提取文件信息": {
      "main": [
        [
          {
            "node": "逐个处理PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "逐个处理PDF": {
      "main": [
        [],
        [
          {
            "node": "提取PDF文本1",
            "type": "main",
            "index": 0
          },
          {
            "node": "提取PDF图片",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "提取PDF文本1": {
      "main": [
        [
          {
            "node": "准备AI Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini 2.5 Pro": {
      "ai_languageModel": [
        [
          {
            "node": "论文解读AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "对话记忆": {
      "ai_memory": [
        [
          {
            "node": "论文解读AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "PDF处理工具": {
      "ai_tool": [
        [
          {
            "node": "论文解读AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "格式化工具": {
      "ai_tool": [
        [
          {
            "node": "论文解读AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent输出处理": {
      "main": [
        [
          {
            "node": "合并正文内容和链接",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "上传封面到微信2": {
      "main": [
        [
          {
            "node": "合并AI内容和封面",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "合并AI内容和封面": {
      "main": [
        [
          {
            "node": "准备AI微信草稿数据",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "准备AI微信草稿数据": {
      "main": [
        [
          {
            "node": "保存AI微信草稿",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "保存AI微信草稿": {
      "main": [
        [
          {
            "node": "逐个处理PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "论文解读AI Agent": {
      "main": [
        [
          {
            "node": "合并Markdown和图片",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "准备AI Prompt": {
      "main": [
        [
          {
            "node": "论文解读AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mdnice格式转换": {
      "main": [
        [
          {
            "node": "AI Agent输出处理",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "提取PDF图片": {
      "main": [
        [
          {
            "node": "处理图片路径",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "合并Markdown和图片": {
      "main": [
        [
          {
            "node": "Mdnice格式转换",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "处理图片路径": {
      "main": [
        [
          {
            "node": "过滤正文图片",
            "type": "main",
            "index": 0
          },
          {
            "node": "过滤第一页图片",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "过滤正文图片": {
      "main": [
        [
          {
            "node": "上传正文图片",
            "type": "main",
            "index": 0
          },
          {
            "node": "提取第一张图作为封面",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "上传正文图片": {
      "main": [
        [
          {
            "node": "汇总正文图片链接",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "汇总正文图片链接": {
      "main": [
        [
          {
            "node": "合并正文内容和链接",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "替换正文图片链接": {
      "main": [
        [
          {
            "node": "合并AI内容和封面",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "合并正文内容和链接": {
      "main": [
        [
          {
            "node": "合并第一页和正文内容",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "提取第一张图作为封面": {
      "main": [
        [
          {
            "node": "上传封面到微信2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "过滤第一页图片": {
      "main": [
        [
          {
            "node": "上传第一页到微信",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "上传第一页到微信": {
      "main": [
        [
          {
            "node": "合并第一页和正文内容",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "合并第一页和正文内容": {
      "main": [
        [
          {
            "node": "替换正文图片链接",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "0b6cd205-4a7f-4786-a807-a60362396778",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "55eea1944d6d0944ec0c448021aced11250d527b9d21d7157e4aa73d564b38ed"
  },
  "id": "e1aSb0wo844W55KM",
  "tags": []
}